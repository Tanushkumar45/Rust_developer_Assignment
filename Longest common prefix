fn longest_common_prefix(strings: &[String]) -> String {
    if strings.is_empty() {
        return String::new(); 
    }

    let mut prefix = strings[0].clone(); 

    for string in &strings[1..] {
        prefix.truncate(string.len());
        for (i, c) in string.chars().enumerate() {
            if let Some(prefix_char) = prefix.chars().nth(i) {
                if prefix_char != c {
                    prefix.truncate(i);
                    break;
                }
            } else {
                prefix.truncate(i);
                break;
            }
        }
    }

    prefix
}

fn main() {
    let strings = vec![
        String::from("flower"),
        String::from("flow"),
        String::from("flight"),
    ];

    let common_prefix = longest_common_prefix(&strings);
    println!("Longest common prefix: {}", common_prefix);
}
